quarkus.http.root-path=api
# datasource configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DATASOURCE_USERNAME}
quarkus.datasource.password=${DATASOURCE_PASSWORD}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DATASOURCE_HOST}:${DATASOURCE_PORT:5432}/${DATASOURCE_DB}
quarkus.datasource.reactive.url=postgresql://${DATASOURCE_HOST}:${DATASOURCE_PORT:5432}/${DATASOURCE_DB}
# drop and create the database at startup (use `update` to only update the schema)
#quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.generation=update
# Http configuration
quarkus.http.cors=true
#quarkus.http.cors.origins=http://foo.com,http://www.bar.io,/https://([a-z0-9\\-_]+)\\.app\\.mydomain\\.com/
quarkus.http.cors.origins=http://localhost:3035,*
quarkus.http.cors.methods=GET,PUT,POST,OPTIONS
quarkus.http.cors.headers=X-Custom, Sec-*, User-Agent, Content-Type
quarkus.http.cors.exposed-headers=Content-Disposition
quarkus.http.cors.access-control-max-age=24H
quarkus.http.cors.access-control-allow-credentials=true
quarkus.smallrye-openapi.path=/swagger
#quarkus.smallrye-openapi.path=/q/openapi
# OIDC Configuration
%prod.quarkus.oidc.auth-server-url=${KEYCLOAK_URL}
quarkus.oidc.client-id=${KEYCLOAK_CLIENTID}
quarkus.oidc.credentials.secret=${KEYCLOAK_CLIENTSECRET}
quarkus.oidc.tls.verification=none
# Enable Policy Enforcement
quarkus.keycloak.policy-enforcer.enable=true
# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes
# quarkus.keycloak.devservices.realm-path=quarkus-realm.json